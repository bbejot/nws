# coding: utf-8

"""
    weather.gov API

    weather.gov API  # noqa: E501

    OpenAPI spec version: 1.8.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ObservationStation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'JsonLdContext',
        'geometry': 'GeometryString',
        'id': 'str',
        'type': 'str',
        'elevation': 'QuantitativeValue',
        'station_identifier': 'str',
        'name': 'str',
        'time_zone': 'str',
        'forecast': 'str',
        'county': 'str',
        'fire_weather_zone': 'str'
    }

    attribute_map = {
        'context': '@context',
        'geometry': 'geometry',
        'id': '@id',
        'type': '@type',
        'elevation': 'elevation',
        'station_identifier': 'stationIdentifier',
        'name': 'name',
        'time_zone': 'timeZone',
        'forecast': 'forecast',
        'county': 'county',
        'fire_weather_zone': 'fireWeatherZone'
    }

    def __init__(self, context=None, geometry=None, id=None, type=None, elevation=None, station_identifier=None, name=None, time_zone=None, forecast=None, county=None, fire_weather_zone=None):  # noqa: E501
        """ObservationStation - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._geometry = None
        self._id = None
        self._type = None
        self._elevation = None
        self._station_identifier = None
        self._name = None
        self._time_zone = None
        self._forecast = None
        self._county = None
        self._fire_weather_zone = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if geometry is not None:
            self.geometry = geometry
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if elevation is not None:
            self.elevation = elevation
        if station_identifier is not None:
            self.station_identifier = station_identifier
        if name is not None:
            self.name = name
        if time_zone is not None:
            self.time_zone = time_zone
        if forecast is not None:
            self.forecast = forecast
        if county is not None:
            self.county = county
        if fire_weather_zone is not None:
            self.fire_weather_zone = fire_weather_zone

    @property
    def context(self):
        """Gets the context of this ObservationStation.  # noqa: E501


        :return: The context of this ObservationStation.  # noqa: E501
        :rtype: JsonLdContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ObservationStation.


        :param context: The context of this ObservationStation.  # noqa: E501
        :type: JsonLdContext
        """

        self._context = context

    @property
    def geometry(self):
        """Gets the geometry of this ObservationStation.  # noqa: E501


        :return: The geometry of this ObservationStation.  # noqa: E501
        :rtype: GeometryString
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this ObservationStation.


        :param geometry: The geometry of this ObservationStation.  # noqa: E501
        :type: GeometryString
        """

        self._geometry = geometry

    @property
    def id(self):
        """Gets the id of this ObservationStation.  # noqa: E501


        :return: The id of this ObservationStation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ObservationStation.


        :param id: The id of this ObservationStation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this ObservationStation.  # noqa: E501


        :return: The type of this ObservationStation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ObservationStation.


        :param type: The type of this ObservationStation.  # noqa: E501
        :type: str
        """
        allowed_values = ["wx:ObservationStation"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def elevation(self):
        """Gets the elevation of this ObservationStation.  # noqa: E501


        :return: The elevation of this ObservationStation.  # noqa: E501
        :rtype: QuantitativeValue
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation):
        """Sets the elevation of this ObservationStation.


        :param elevation: The elevation of this ObservationStation.  # noqa: E501
        :type: QuantitativeValue
        """

        self._elevation = elevation

    @property
    def station_identifier(self):
        """Gets the station_identifier of this ObservationStation.  # noqa: E501


        :return: The station_identifier of this ObservationStation.  # noqa: E501
        :rtype: str
        """
        return self._station_identifier

    @station_identifier.setter
    def station_identifier(self, station_identifier):
        """Sets the station_identifier of this ObservationStation.


        :param station_identifier: The station_identifier of this ObservationStation.  # noqa: E501
        :type: str
        """

        self._station_identifier = station_identifier

    @property
    def name(self):
        """Gets the name of this ObservationStation.  # noqa: E501


        :return: The name of this ObservationStation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObservationStation.


        :param name: The name of this ObservationStation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def time_zone(self):
        """Gets the time_zone of this ObservationStation.  # noqa: E501


        :return: The time_zone of this ObservationStation.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this ObservationStation.


        :param time_zone: The time_zone of this ObservationStation.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def forecast(self):
        """Gets the forecast of this ObservationStation.  # noqa: E501

        A link to the NWS public forecast zone containing this station.  # noqa: E501

        :return: The forecast of this ObservationStation.  # noqa: E501
        :rtype: str
        """
        return self._forecast

    @forecast.setter
    def forecast(self, forecast):
        """Sets the forecast of this ObservationStation.

        A link to the NWS public forecast zone containing this station.  # noqa: E501

        :param forecast: The forecast of this ObservationStation.  # noqa: E501
        :type: str
        """

        self._forecast = forecast

    @property
    def county(self):
        """Gets the county of this ObservationStation.  # noqa: E501

        A link to the NWS county zone containing this station.  # noqa: E501

        :return: The county of this ObservationStation.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this ObservationStation.

        A link to the NWS county zone containing this station.  # noqa: E501

        :param county: The county of this ObservationStation.  # noqa: E501
        :type: str
        """

        self._county = county

    @property
    def fire_weather_zone(self):
        """Gets the fire_weather_zone of this ObservationStation.  # noqa: E501

        A link to the NWS fire weather forecast zone containing this station.  # noqa: E501

        :return: The fire_weather_zone of this ObservationStation.  # noqa: E501
        :rtype: str
        """
        return self._fire_weather_zone

    @fire_weather_zone.setter
    def fire_weather_zone(self, fire_weather_zone):
        """Sets the fire_weather_zone of this ObservationStation.

        A link to the NWS fire weather forecast zone containing this station.  # noqa: E501

        :param fire_weather_zone: The fire_weather_zone of this ObservationStation.  # noqa: E501
        :type: str
        """

        self._fire_weather_zone = fire_weather_zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ObservationStation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObservationStation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
