# coding: utf-8

"""
    weather.gov API

    weather.gov API  # noqa: E501

    OpenAPI spec version: 1.8.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetarPhenomenon(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'intensity': 'str',
        'modifier': 'str',
        'weather': 'str',
        'raw_string': 'str',
        'in_vicinity': 'bool'
    }

    attribute_map = {
        'intensity': 'intensity',
        'modifier': 'modifier',
        'weather': 'weather',
        'raw_string': 'rawString',
        'in_vicinity': 'inVicinity'
    }

    def __init__(self, intensity=None, modifier=None, weather=None, raw_string=None, in_vicinity=None):  # noqa: E501
        """MetarPhenomenon - a model defined in Swagger"""  # noqa: E501
        self._intensity = None
        self._modifier = None
        self._weather = None
        self._raw_string = None
        self._in_vicinity = None
        self.discriminator = None
        self.intensity = intensity
        self.modifier = modifier
        self.weather = weather
        self.raw_string = raw_string
        if in_vicinity is not None:
            self.in_vicinity = in_vicinity

    @property
    def intensity(self):
        """Gets the intensity of this MetarPhenomenon.  # noqa: E501


        :return: The intensity of this MetarPhenomenon.  # noqa: E501
        :rtype: str
        """
        return self._intensity

    @intensity.setter
    def intensity(self, intensity):
        """Sets the intensity of this MetarPhenomenon.


        :param intensity: The intensity of this MetarPhenomenon.  # noqa: E501
        :type: str
        """
        if intensity is None:
            raise ValueError("Invalid value for `intensity`, must not be `None`")  # noqa: E501
        allowed_values = ["light", "heavy"]  # noqa: E501
        if intensity not in allowed_values:
            raise ValueError(
                "Invalid value for `intensity` ({0}), must be one of {1}"  # noqa: E501
                .format(intensity, allowed_values)
            )

        self._intensity = intensity

    @property
    def modifier(self):
        """Gets the modifier of this MetarPhenomenon.  # noqa: E501


        :return: The modifier of this MetarPhenomenon.  # noqa: E501
        :rtype: str
        """
        return self._modifier

    @modifier.setter
    def modifier(self, modifier):
        """Sets the modifier of this MetarPhenomenon.


        :param modifier: The modifier of this MetarPhenomenon.  # noqa: E501
        :type: str
        """
        if modifier is None:
            raise ValueError("Invalid value for `modifier`, must not be `None`")  # noqa: E501
        allowed_values = ["patches", "blowing", "low_drifting", "freezing", "shallow", "partial", "showers"]  # noqa: E501
        if modifier not in allowed_values:
            raise ValueError(
                "Invalid value for `modifier` ({0}), must be one of {1}"  # noqa: E501
                .format(modifier, allowed_values)
            )

        self._modifier = modifier

    @property
    def weather(self):
        """Gets the weather of this MetarPhenomenon.  # noqa: E501


        :return: The weather of this MetarPhenomenon.  # noqa: E501
        :rtype: str
        """
        return self._weather

    @weather.setter
    def weather(self, weather):
        """Sets the weather of this MetarPhenomenon.


        :param weather: The weather of this MetarPhenomenon.  # noqa: E501
        :type: str
        """
        if weather is None:
            raise ValueError("Invalid value for `weather`, must not be `None`")  # noqa: E501
        allowed_values = ["fog_mist", "dust_storm", "dust", "drizzle", "funnel_cloud", "fog", "smoke", "hail", "snow_pellets", "haze", "ice_crystals", "ice_pellets", "dust_whirls", "spray", "rain", "sand", "snow_grains", "snow", "squalls", "sand_storm", "thunderstorms", "unknown", "volcanic_ash"]  # noqa: E501
        if weather not in allowed_values:
            raise ValueError(
                "Invalid value for `weather` ({0}), must be one of {1}"  # noqa: E501
                .format(weather, allowed_values)
            )

        self._weather = weather

    @property
    def raw_string(self):
        """Gets the raw_string of this MetarPhenomenon.  # noqa: E501


        :return: The raw_string of this MetarPhenomenon.  # noqa: E501
        :rtype: str
        """
        return self._raw_string

    @raw_string.setter
    def raw_string(self, raw_string):
        """Sets the raw_string of this MetarPhenomenon.


        :param raw_string: The raw_string of this MetarPhenomenon.  # noqa: E501
        :type: str
        """
        if raw_string is None:
            raise ValueError("Invalid value for `raw_string`, must not be `None`")  # noqa: E501

        self._raw_string = raw_string

    @property
    def in_vicinity(self):
        """Gets the in_vicinity of this MetarPhenomenon.  # noqa: E501


        :return: The in_vicinity of this MetarPhenomenon.  # noqa: E501
        :rtype: bool
        """
        return self._in_vicinity

    @in_vicinity.setter
    def in_vicinity(self, in_vicinity):
        """Sets the in_vicinity of this MetarPhenomenon.


        :param in_vicinity: The in_vicinity of this MetarPhenomenon.  # noqa: E501
        :type: bool
        """

        self._in_vicinity = in_vicinity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetarPhenomenon, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetarPhenomenon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
