# coding: utf-8

"""
    weather.gov API

    weather.gov API  # noqa: E501

    OpenAPI spec version: 1.8.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Point(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'JsonLdContext',
        'geometry': 'GeometryString',
        'id': 'str',
        'type': 'str',
        'cwa': 'NWSForecastOfficeId',
        'forecast_office': 'str',
        'grid_id': 'NWSForecastOfficeId',
        'grid_x': 'int',
        'grid_y': 'int',
        'forecast': 'str',
        'forecast_hourly': 'str',
        'forecast_grid_data': 'str',
        'observation_stations': 'str',
        'relative_location': 'OneOfPointRelativeLocation',
        'forecast_zone': 'str',
        'county': 'str',
        'fire_weather_zone': 'str',
        'time_zone': 'str',
        'radar_station': 'str'
    }

    attribute_map = {
        'context': '@context',
        'geometry': 'geometry',
        'id': '@id',
        'type': '@type',
        'cwa': 'cwa',
        'forecast_office': 'forecastOffice',
        'grid_id': 'gridId',
        'grid_x': 'gridX',
        'grid_y': 'gridY',
        'forecast': 'forecast',
        'forecast_hourly': 'forecastHourly',
        'forecast_grid_data': 'forecastGridData',
        'observation_stations': 'observationStations',
        'relative_location': 'relativeLocation',
        'forecast_zone': 'forecastZone',
        'county': 'county',
        'fire_weather_zone': 'fireWeatherZone',
        'time_zone': 'timeZone',
        'radar_station': 'radarStation'
    }

    def __init__(self, context=None, geometry=None, id=None, type=None, cwa=None, forecast_office=None, grid_id=None, grid_x=None, grid_y=None, forecast=None, forecast_hourly=None, forecast_grid_data=None, observation_stations=None, relative_location=None, forecast_zone=None, county=None, fire_weather_zone=None, time_zone=None, radar_station=None):  # noqa: E501
        """Point - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._geometry = None
        self._id = None
        self._type = None
        self._cwa = None
        self._forecast_office = None
        self._grid_id = None
        self._grid_x = None
        self._grid_y = None
        self._forecast = None
        self._forecast_hourly = None
        self._forecast_grid_data = None
        self._observation_stations = None
        self._relative_location = None
        self._forecast_zone = None
        self._county = None
        self._fire_weather_zone = None
        self._time_zone = None
        self._radar_station = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if geometry is not None:
            self.geometry = geometry
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if cwa is not None:
            self.cwa = cwa
        if forecast_office is not None:
            self.forecast_office = forecast_office
        if grid_id is not None:
            self.grid_id = grid_id
        if grid_x is not None:
            self.grid_x = grid_x
        if grid_y is not None:
            self.grid_y = grid_y
        if forecast is not None:
            self.forecast = forecast
        if forecast_hourly is not None:
            self.forecast_hourly = forecast_hourly
        if forecast_grid_data is not None:
            self.forecast_grid_data = forecast_grid_data
        if observation_stations is not None:
            self.observation_stations = observation_stations
        if relative_location is not None:
            self.relative_location = relative_location
        if forecast_zone is not None:
            self.forecast_zone = forecast_zone
        if county is not None:
            self.county = county
        if fire_weather_zone is not None:
            self.fire_weather_zone = fire_weather_zone
        if time_zone is not None:
            self.time_zone = time_zone
        if radar_station is not None:
            self.radar_station = radar_station

    @property
    def context(self):
        """Gets the context of this Point.  # noqa: E501


        :return: The context of this Point.  # noqa: E501
        :rtype: JsonLdContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this Point.


        :param context: The context of this Point.  # noqa: E501
        :type: JsonLdContext
        """

        self._context = context

    @property
    def geometry(self):
        """Gets the geometry of this Point.  # noqa: E501


        :return: The geometry of this Point.  # noqa: E501
        :rtype: GeometryString
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this Point.


        :param geometry: The geometry of this Point.  # noqa: E501
        :type: GeometryString
        """

        self._geometry = geometry

    @property
    def id(self):
        """Gets the id of this Point.  # noqa: E501


        :return: The id of this Point.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Point.


        :param id: The id of this Point.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Point.  # noqa: E501


        :return: The type of this Point.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Point.


        :param type: The type of this Point.  # noqa: E501
        :type: str
        """
        allowed_values = ["wx:Point"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def cwa(self):
        """Gets the cwa of this Point.  # noqa: E501


        :return: The cwa of this Point.  # noqa: E501
        :rtype: NWSForecastOfficeId
        """
        return self._cwa

    @cwa.setter
    def cwa(self, cwa):
        """Sets the cwa of this Point.


        :param cwa: The cwa of this Point.  # noqa: E501
        :type: NWSForecastOfficeId
        """

        self._cwa = cwa

    @property
    def forecast_office(self):
        """Gets the forecast_office of this Point.  # noqa: E501


        :return: The forecast_office of this Point.  # noqa: E501
        :rtype: str
        """
        return self._forecast_office

    @forecast_office.setter
    def forecast_office(self, forecast_office):
        """Sets the forecast_office of this Point.


        :param forecast_office: The forecast_office of this Point.  # noqa: E501
        :type: str
        """

        self._forecast_office = forecast_office

    @property
    def grid_id(self):
        """Gets the grid_id of this Point.  # noqa: E501


        :return: The grid_id of this Point.  # noqa: E501
        :rtype: NWSForecastOfficeId
        """
        return self._grid_id

    @grid_id.setter
    def grid_id(self, grid_id):
        """Sets the grid_id of this Point.


        :param grid_id: The grid_id of this Point.  # noqa: E501
        :type: NWSForecastOfficeId
        """

        self._grid_id = grid_id

    @property
    def grid_x(self):
        """Gets the grid_x of this Point.  # noqa: E501


        :return: The grid_x of this Point.  # noqa: E501
        :rtype: int
        """
        return self._grid_x

    @grid_x.setter
    def grid_x(self, grid_x):
        """Sets the grid_x of this Point.


        :param grid_x: The grid_x of this Point.  # noqa: E501
        :type: int
        """

        self._grid_x = grid_x

    @property
    def grid_y(self):
        """Gets the grid_y of this Point.  # noqa: E501


        :return: The grid_y of this Point.  # noqa: E501
        :rtype: int
        """
        return self._grid_y

    @grid_y.setter
    def grid_y(self, grid_y):
        """Sets the grid_y of this Point.


        :param grid_y: The grid_y of this Point.  # noqa: E501
        :type: int
        """

        self._grid_y = grid_y

    @property
    def forecast(self):
        """Gets the forecast of this Point.  # noqa: E501


        :return: The forecast of this Point.  # noqa: E501
        :rtype: str
        """
        return self._forecast

    @forecast.setter
    def forecast(self, forecast):
        """Sets the forecast of this Point.


        :param forecast: The forecast of this Point.  # noqa: E501
        :type: str
        """

        self._forecast = forecast

    @property
    def forecast_hourly(self):
        """Gets the forecast_hourly of this Point.  # noqa: E501


        :return: The forecast_hourly of this Point.  # noqa: E501
        :rtype: str
        """
        return self._forecast_hourly

    @forecast_hourly.setter
    def forecast_hourly(self, forecast_hourly):
        """Sets the forecast_hourly of this Point.


        :param forecast_hourly: The forecast_hourly of this Point.  # noqa: E501
        :type: str
        """

        self._forecast_hourly = forecast_hourly

    @property
    def forecast_grid_data(self):
        """Gets the forecast_grid_data of this Point.  # noqa: E501


        :return: The forecast_grid_data of this Point.  # noqa: E501
        :rtype: str
        """
        return self._forecast_grid_data

    @forecast_grid_data.setter
    def forecast_grid_data(self, forecast_grid_data):
        """Sets the forecast_grid_data of this Point.


        :param forecast_grid_data: The forecast_grid_data of this Point.  # noqa: E501
        :type: str
        """

        self._forecast_grid_data = forecast_grid_data

    @property
    def observation_stations(self):
        """Gets the observation_stations of this Point.  # noqa: E501


        :return: The observation_stations of this Point.  # noqa: E501
        :rtype: str
        """
        return self._observation_stations

    @observation_stations.setter
    def observation_stations(self, observation_stations):
        """Sets the observation_stations of this Point.


        :param observation_stations: The observation_stations of this Point.  # noqa: E501
        :type: str
        """

        self._observation_stations = observation_stations

    @property
    def relative_location(self):
        """Gets the relative_location of this Point.  # noqa: E501


        :return: The relative_location of this Point.  # noqa: E501
        :rtype: OneOfPointRelativeLocation
        """
        return self._relative_location

    @relative_location.setter
    def relative_location(self, relative_location):
        """Sets the relative_location of this Point.


        :param relative_location: The relative_location of this Point.  # noqa: E501
        :type: OneOfPointRelativeLocation
        """

        self._relative_location = relative_location

    @property
    def forecast_zone(self):
        """Gets the forecast_zone of this Point.  # noqa: E501


        :return: The forecast_zone of this Point.  # noqa: E501
        :rtype: str
        """
        return self._forecast_zone

    @forecast_zone.setter
    def forecast_zone(self, forecast_zone):
        """Sets the forecast_zone of this Point.


        :param forecast_zone: The forecast_zone of this Point.  # noqa: E501
        :type: str
        """

        self._forecast_zone = forecast_zone

    @property
    def county(self):
        """Gets the county of this Point.  # noqa: E501


        :return: The county of this Point.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this Point.


        :param county: The county of this Point.  # noqa: E501
        :type: str
        """

        self._county = county

    @property
    def fire_weather_zone(self):
        """Gets the fire_weather_zone of this Point.  # noqa: E501


        :return: The fire_weather_zone of this Point.  # noqa: E501
        :rtype: str
        """
        return self._fire_weather_zone

    @fire_weather_zone.setter
    def fire_weather_zone(self, fire_weather_zone):
        """Sets the fire_weather_zone of this Point.


        :param fire_weather_zone: The fire_weather_zone of this Point.  # noqa: E501
        :type: str
        """

        self._fire_weather_zone = fire_weather_zone

    @property
    def time_zone(self):
        """Gets the time_zone of this Point.  # noqa: E501


        :return: The time_zone of this Point.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Point.


        :param time_zone: The time_zone of this Point.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def radar_station(self):
        """Gets the radar_station of this Point.  # noqa: E501


        :return: The radar_station of this Point.  # noqa: E501
        :rtype: str
        """
        return self._radar_station

    @radar_station.setter
    def radar_station(self, radar_station):
        """Sets the radar_station of this Point.


        :param radar_station: The radar_station of this Point.  # noqa: E501
        :type: str
        """

        self._radar_station = radar_station

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Point, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Point):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
