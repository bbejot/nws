# coding: utf-8

"""
    weather.gov API

    weather.gov API  # noqa: E501

    OpenAPI spec version: 1.8.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OfficeAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'street_address': 'str',
        'address_locality': 'str',
        'address_region': 'str',
        'postal_code': 'str'
    }

    attribute_map = {
        'type': '@type',
        'street_address': 'streetAddress',
        'address_locality': 'addressLocality',
        'address_region': 'addressRegion',
        'postal_code': 'postalCode'
    }

    def __init__(self, type=None, street_address=None, address_locality=None, address_region=None, postal_code=None):  # noqa: E501
        """OfficeAddress - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._street_address = None
        self._address_locality = None
        self._address_region = None
        self._postal_code = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if street_address is not None:
            self.street_address = street_address
        if address_locality is not None:
            self.address_locality = address_locality
        if address_region is not None:
            self.address_region = address_region
        if postal_code is not None:
            self.postal_code = postal_code

    @property
    def type(self):
        """Gets the type of this OfficeAddress.  # noqa: E501


        :return: The type of this OfficeAddress.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OfficeAddress.


        :param type: The type of this OfficeAddress.  # noqa: E501
        :type: str
        """
        allowed_values = ["PostalAddress"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def street_address(self):
        """Gets the street_address of this OfficeAddress.  # noqa: E501


        :return: The street_address of this OfficeAddress.  # noqa: E501
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this OfficeAddress.


        :param street_address: The street_address of this OfficeAddress.  # noqa: E501
        :type: str
        """

        self._street_address = street_address

    @property
    def address_locality(self):
        """Gets the address_locality of this OfficeAddress.  # noqa: E501


        :return: The address_locality of this OfficeAddress.  # noqa: E501
        :rtype: str
        """
        return self._address_locality

    @address_locality.setter
    def address_locality(self, address_locality):
        """Sets the address_locality of this OfficeAddress.


        :param address_locality: The address_locality of this OfficeAddress.  # noqa: E501
        :type: str
        """

        self._address_locality = address_locality

    @property
    def address_region(self):
        """Gets the address_region of this OfficeAddress.  # noqa: E501


        :return: The address_region of this OfficeAddress.  # noqa: E501
        :rtype: str
        """
        return self._address_region

    @address_region.setter
    def address_region(self, address_region):
        """Sets the address_region of this OfficeAddress.


        :param address_region: The address_region of this OfficeAddress.  # noqa: E501
        :type: str
        """

        self._address_region = address_region

    @property
    def postal_code(self):
        """Gets the postal_code of this OfficeAddress.  # noqa: E501


        :return: The postal_code of this OfficeAddress.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this OfficeAddress.


        :param postal_code: The postal_code of this OfficeAddress.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OfficeAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OfficeAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
