# coding: utf-8

"""
    weather.gov API

    weather.gov API  # noqa: E501

    OpenAPI spec version: 1.8.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GridpointWeatherValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coverage': 'str',
        'weather': 'str',
        'intensity': 'str',
        'visibility': 'QuantitativeValue',
        'attributes': 'list[str]'
    }

    attribute_map = {
        'coverage': 'coverage',
        'weather': 'weather',
        'intensity': 'intensity',
        'visibility': 'visibility',
        'attributes': 'attributes'
    }

    def __init__(self, coverage=None, weather=None, intensity=None, visibility=None, attributes=None):  # noqa: E501
        """GridpointWeatherValue - a model defined in Swagger"""  # noqa: E501
        self._coverage = None
        self._weather = None
        self._intensity = None
        self._visibility = None
        self._attributes = None
        self.discriminator = None
        self.coverage = coverage
        self.weather = weather
        self.intensity = intensity
        self.visibility = visibility
        self.attributes = attributes

    @property
    def coverage(self):
        """Gets the coverage of this GridpointWeatherValue.  # noqa: E501


        :return: The coverage of this GridpointWeatherValue.  # noqa: E501
        :rtype: str
        """
        return self._coverage

    @coverage.setter
    def coverage(self, coverage):
        """Sets the coverage of this GridpointWeatherValue.


        :param coverage: The coverage of this GridpointWeatherValue.  # noqa: E501
        :type: str
        """
        if coverage is None:
            raise ValueError("Invalid value for `coverage`, must not be `None`")  # noqa: E501
        allowed_values = ["areas", "brief", "chance", "definite", "few", "frequent", "intermittent", "isolated", "likely", "numerous", "occasional", "patchy", "periods", "scattered", "slight_chance", "widespread"]  # noqa: E501
        if coverage not in allowed_values:
            raise ValueError(
                "Invalid value for `coverage` ({0}), must be one of {1}"  # noqa: E501
                .format(coverage, allowed_values)
            )

        self._coverage = coverage

    @property
    def weather(self):
        """Gets the weather of this GridpointWeatherValue.  # noqa: E501


        :return: The weather of this GridpointWeatherValue.  # noqa: E501
        :rtype: str
        """
        return self._weather

    @weather.setter
    def weather(self, weather):
        """Sets the weather of this GridpointWeatherValue.


        :param weather: The weather of this GridpointWeatherValue.  # noqa: E501
        :type: str
        """
        if weather is None:
            raise ValueError("Invalid value for `weather`, must not be `None`")  # noqa: E501
        allowed_values = ["blowing_dust", "blowing_sand", "blowing_snow", "drizzle", "fog", "freezing_fog", "freezing_drizzle", "freezing_rain", "freezing_spray", "frost", "hail", "haze", "ice_crystals", "ice_fog", "rain", "rain_showers", "sleet", "smoke", "snow", "snow_showers", "thunderstorms", "volcanic_ash", "water_spouts"]  # noqa: E501
        if weather not in allowed_values:
            raise ValueError(
                "Invalid value for `weather` ({0}), must be one of {1}"  # noqa: E501
                .format(weather, allowed_values)
            )

        self._weather = weather

    @property
    def intensity(self):
        """Gets the intensity of this GridpointWeatherValue.  # noqa: E501


        :return: The intensity of this GridpointWeatherValue.  # noqa: E501
        :rtype: str
        """
        return self._intensity

    @intensity.setter
    def intensity(self, intensity):
        """Sets the intensity of this GridpointWeatherValue.


        :param intensity: The intensity of this GridpointWeatherValue.  # noqa: E501
        :type: str
        """
        if intensity is None:
            raise ValueError("Invalid value for `intensity`, must not be `None`")  # noqa: E501
        allowed_values = ["very_light", "light", "moderate", "heavy"]  # noqa: E501
        if intensity not in allowed_values:
            raise ValueError(
                "Invalid value for `intensity` ({0}), must be one of {1}"  # noqa: E501
                .format(intensity, allowed_values)
            )

        self._intensity = intensity

    @property
    def visibility(self):
        """Gets the visibility of this GridpointWeatherValue.  # noqa: E501


        :return: The visibility of this GridpointWeatherValue.  # noqa: E501
        :rtype: QuantitativeValue
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this GridpointWeatherValue.


        :param visibility: The visibility of this GridpointWeatherValue.  # noqa: E501
        :type: QuantitativeValue
        """
        if visibility is None:
            raise ValueError("Invalid value for `visibility`, must not be `None`")  # noqa: E501

        self._visibility = visibility

    @property
    def attributes(self):
        """Gets the attributes of this GridpointWeatherValue.  # noqa: E501


        :return: The attributes of this GridpointWeatherValue.  # noqa: E501
        :rtype: list[str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this GridpointWeatherValue.


        :param attributes: The attributes of this GridpointWeatherValue.  # noqa: E501
        :type: list[str]
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")  # noqa: E501
        allowed_values = ["damaging_wind", "dry_thunderstorms", "flooding", "gusty_wind", "heavy_rain", "large_hail", "small_hail", "tornadoes"]  # noqa: E501
        if not set(attributes).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `attributes` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(attributes) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GridpointWeatherValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GridpointWeatherValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
