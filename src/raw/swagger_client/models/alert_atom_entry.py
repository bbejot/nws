# coding: utf-8

"""
    weather.gov API

    weather.gov API  # noqa: E501

    OpenAPI spec version: 1.8.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AlertAtomEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'updated': 'str',
        'published': 'str',
        'author': 'AlertAtomEntryAuthor',
        'summary': 'str',
        'event': 'str',
        'sent': 'str',
        'effective': 'str',
        'expires': 'str',
        'status': 'str',
        'msg_type': 'str',
        'category': 'str',
        'urgency': 'str',
        'severity': 'str',
        'certainty': 'str',
        'area_desc': 'str',
        'polygon': 'str',
        'geocode': 'list[AlertXMLParameter]',
        'parameter': 'list[AlertXMLParameter]'
    }

    attribute_map = {
        'id': 'id',
        'updated': 'updated',
        'published': 'published',
        'author': 'author',
        'summary': 'summary',
        'event': 'event',
        'sent': 'sent',
        'effective': 'effective',
        'expires': 'expires',
        'status': 'status',
        'msg_type': 'msgType',
        'category': 'category',
        'urgency': 'urgency',
        'severity': 'severity',
        'certainty': 'certainty',
        'area_desc': 'areaDesc',
        'polygon': 'polygon',
        'geocode': 'geocode',
        'parameter': 'parameter'
    }

    def __init__(self, id=None, updated=None, published=None, author=None, summary=None, event=None, sent=None, effective=None, expires=None, status=None, msg_type=None, category=None, urgency=None, severity=None, certainty=None, area_desc=None, polygon=None, geocode=None, parameter=None):  # noqa: E501
        """AlertAtomEntry - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._updated = None
        self._published = None
        self._author = None
        self._summary = None
        self._event = None
        self._sent = None
        self._effective = None
        self._expires = None
        self._status = None
        self._msg_type = None
        self._category = None
        self._urgency = None
        self._severity = None
        self._certainty = None
        self._area_desc = None
        self._polygon = None
        self._geocode = None
        self._parameter = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if updated is not None:
            self.updated = updated
        if published is not None:
            self.published = published
        if author is not None:
            self.author = author
        if summary is not None:
            self.summary = summary
        if event is not None:
            self.event = event
        if sent is not None:
            self.sent = sent
        if effective is not None:
            self.effective = effective
        if expires is not None:
            self.expires = expires
        if status is not None:
            self.status = status
        if msg_type is not None:
            self.msg_type = msg_type
        if category is not None:
            self.category = category
        if urgency is not None:
            self.urgency = urgency
        if severity is not None:
            self.severity = severity
        if certainty is not None:
            self.certainty = certainty
        if area_desc is not None:
            self.area_desc = area_desc
        if polygon is not None:
            self.polygon = polygon
        if geocode is not None:
            self.geocode = geocode
        if parameter is not None:
            self.parameter = parameter

    @property
    def id(self):
        """Gets the id of this AlertAtomEntry.  # noqa: E501


        :return: The id of this AlertAtomEntry.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AlertAtomEntry.


        :param id: The id of this AlertAtomEntry.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def updated(self):
        """Gets the updated of this AlertAtomEntry.  # noqa: E501


        :return: The updated of this AlertAtomEntry.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this AlertAtomEntry.


        :param updated: The updated of this AlertAtomEntry.  # noqa: E501
        :type: str
        """

        self._updated = updated

    @property
    def published(self):
        """Gets the published of this AlertAtomEntry.  # noqa: E501


        :return: The published of this AlertAtomEntry.  # noqa: E501
        :rtype: str
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this AlertAtomEntry.


        :param published: The published of this AlertAtomEntry.  # noqa: E501
        :type: str
        """

        self._published = published

    @property
    def author(self):
        """Gets the author of this AlertAtomEntry.  # noqa: E501


        :return: The author of this AlertAtomEntry.  # noqa: E501
        :rtype: AlertAtomEntryAuthor
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this AlertAtomEntry.


        :param author: The author of this AlertAtomEntry.  # noqa: E501
        :type: AlertAtomEntryAuthor
        """

        self._author = author

    @property
    def summary(self):
        """Gets the summary of this AlertAtomEntry.  # noqa: E501


        :return: The summary of this AlertAtomEntry.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this AlertAtomEntry.


        :param summary: The summary of this AlertAtomEntry.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def event(self):
        """Gets the event of this AlertAtomEntry.  # noqa: E501


        :return: The event of this AlertAtomEntry.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this AlertAtomEntry.


        :param event: The event of this AlertAtomEntry.  # noqa: E501
        :type: str
        """

        self._event = event

    @property
    def sent(self):
        """Gets the sent of this AlertAtomEntry.  # noqa: E501


        :return: The sent of this AlertAtomEntry.  # noqa: E501
        :rtype: str
        """
        return self._sent

    @sent.setter
    def sent(self, sent):
        """Sets the sent of this AlertAtomEntry.


        :param sent: The sent of this AlertAtomEntry.  # noqa: E501
        :type: str
        """

        self._sent = sent

    @property
    def effective(self):
        """Gets the effective of this AlertAtomEntry.  # noqa: E501


        :return: The effective of this AlertAtomEntry.  # noqa: E501
        :rtype: str
        """
        return self._effective

    @effective.setter
    def effective(self, effective):
        """Sets the effective of this AlertAtomEntry.


        :param effective: The effective of this AlertAtomEntry.  # noqa: E501
        :type: str
        """

        self._effective = effective

    @property
    def expires(self):
        """Gets the expires of this AlertAtomEntry.  # noqa: E501


        :return: The expires of this AlertAtomEntry.  # noqa: E501
        :rtype: str
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this AlertAtomEntry.


        :param expires: The expires of this AlertAtomEntry.  # noqa: E501
        :type: str
        """

        self._expires = expires

    @property
    def status(self):
        """Gets the status of this AlertAtomEntry.  # noqa: E501


        :return: The status of this AlertAtomEntry.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AlertAtomEntry.


        :param status: The status of this AlertAtomEntry.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def msg_type(self):
        """Gets the msg_type of this AlertAtomEntry.  # noqa: E501


        :return: The msg_type of this AlertAtomEntry.  # noqa: E501
        :rtype: str
        """
        return self._msg_type

    @msg_type.setter
    def msg_type(self, msg_type):
        """Sets the msg_type of this AlertAtomEntry.


        :param msg_type: The msg_type of this AlertAtomEntry.  # noqa: E501
        :type: str
        """

        self._msg_type = msg_type

    @property
    def category(self):
        """Gets the category of this AlertAtomEntry.  # noqa: E501


        :return: The category of this AlertAtomEntry.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AlertAtomEntry.


        :param category: The category of this AlertAtomEntry.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def urgency(self):
        """Gets the urgency of this AlertAtomEntry.  # noqa: E501


        :return: The urgency of this AlertAtomEntry.  # noqa: E501
        :rtype: str
        """
        return self._urgency

    @urgency.setter
    def urgency(self, urgency):
        """Sets the urgency of this AlertAtomEntry.


        :param urgency: The urgency of this AlertAtomEntry.  # noqa: E501
        :type: str
        """

        self._urgency = urgency

    @property
    def severity(self):
        """Gets the severity of this AlertAtomEntry.  # noqa: E501


        :return: The severity of this AlertAtomEntry.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this AlertAtomEntry.


        :param severity: The severity of this AlertAtomEntry.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def certainty(self):
        """Gets the certainty of this AlertAtomEntry.  # noqa: E501


        :return: The certainty of this AlertAtomEntry.  # noqa: E501
        :rtype: str
        """
        return self._certainty

    @certainty.setter
    def certainty(self, certainty):
        """Sets the certainty of this AlertAtomEntry.


        :param certainty: The certainty of this AlertAtomEntry.  # noqa: E501
        :type: str
        """

        self._certainty = certainty

    @property
    def area_desc(self):
        """Gets the area_desc of this AlertAtomEntry.  # noqa: E501


        :return: The area_desc of this AlertAtomEntry.  # noqa: E501
        :rtype: str
        """
        return self._area_desc

    @area_desc.setter
    def area_desc(self, area_desc):
        """Sets the area_desc of this AlertAtomEntry.


        :param area_desc: The area_desc of this AlertAtomEntry.  # noqa: E501
        :type: str
        """

        self._area_desc = area_desc

    @property
    def polygon(self):
        """Gets the polygon of this AlertAtomEntry.  # noqa: E501


        :return: The polygon of this AlertAtomEntry.  # noqa: E501
        :rtype: str
        """
        return self._polygon

    @polygon.setter
    def polygon(self, polygon):
        """Sets the polygon of this AlertAtomEntry.


        :param polygon: The polygon of this AlertAtomEntry.  # noqa: E501
        :type: str
        """

        self._polygon = polygon

    @property
    def geocode(self):
        """Gets the geocode of this AlertAtomEntry.  # noqa: E501


        :return: The geocode of this AlertAtomEntry.  # noqa: E501
        :rtype: list[AlertXMLParameter]
        """
        return self._geocode

    @geocode.setter
    def geocode(self, geocode):
        """Sets the geocode of this AlertAtomEntry.


        :param geocode: The geocode of this AlertAtomEntry.  # noqa: E501
        :type: list[AlertXMLParameter]
        """

        self._geocode = geocode

    @property
    def parameter(self):
        """Gets the parameter of this AlertAtomEntry.  # noqa: E501


        :return: The parameter of this AlertAtomEntry.  # noqa: E501
        :rtype: list[AlertXMLParameter]
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this AlertAtomEntry.


        :param parameter: The parameter of this AlertAtomEntry.  # noqa: E501
        :type: list[AlertXMLParameter]
        """

        self._parameter = parameter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertAtomEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertAtomEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
