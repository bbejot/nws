# coding: utf-8

"""
    weather.gov API

    weather.gov API  # noqa: E501

    OpenAPI spec version: 1.8.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total': 'int',
        'land': 'int',
        'marine': 'int',
        'regions': 'dict(str, int)',
        'areas': 'dict(str, int)',
        'zones': 'dict(str, int)'
    }

    attribute_map = {
        'total': 'total',
        'land': 'land',
        'marine': 'marine',
        'regions': 'regions',
        'areas': 'areas',
        'zones': 'zones'
    }

    def __init__(self, total=None, land=None, marine=None, regions=None, areas=None, zones=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger"""  # noqa: E501
        self._total = None
        self._land = None
        self._marine = None
        self._regions = None
        self._areas = None
        self._zones = None
        self.discriminator = None
        if total is not None:
            self.total = total
        if land is not None:
            self.land = land
        if marine is not None:
            self.marine = marine
        if regions is not None:
            self.regions = regions
        if areas is not None:
            self.areas = areas
        if zones is not None:
            self.zones = zones

    @property
    def total(self):
        """Gets the total of this InlineResponse200.  # noqa: E501

        The total number of active alerts  # noqa: E501

        :return: The total of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this InlineResponse200.

        The total number of active alerts  # noqa: E501

        :param total: The total of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def land(self):
        """Gets the land of this InlineResponse200.  # noqa: E501

        The total number of active alerts affecting land zones  # noqa: E501

        :return: The land of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._land

    @land.setter
    def land(self, land):
        """Sets the land of this InlineResponse200.

        The total number of active alerts affecting land zones  # noqa: E501

        :param land: The land of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._land = land

    @property
    def marine(self):
        """Gets the marine of this InlineResponse200.  # noqa: E501

        The total number of active alerts affecting marine zones  # noqa: E501

        :return: The marine of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._marine

    @marine.setter
    def marine(self, marine):
        """Sets the marine of this InlineResponse200.

        The total number of active alerts affecting marine zones  # noqa: E501

        :param marine: The marine of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._marine = marine

    @property
    def regions(self):
        """Gets the regions of this InlineResponse200.  # noqa: E501

        Active alerts by marine region  # noqa: E501

        :return: The regions of this InlineResponse200.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this InlineResponse200.

        Active alerts by marine region  # noqa: E501

        :param regions: The regions of this InlineResponse200.  # noqa: E501
        :type: dict(str, int)
        """

        self._regions = regions

    @property
    def areas(self):
        """Gets the areas of this InlineResponse200.  # noqa: E501

        Active alerts by area (state/territory)  # noqa: E501

        :return: The areas of this InlineResponse200.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._areas

    @areas.setter
    def areas(self, areas):
        """Sets the areas of this InlineResponse200.

        Active alerts by area (state/territory)  # noqa: E501

        :param areas: The areas of this InlineResponse200.  # noqa: E501
        :type: dict(str, int)
        """

        self._areas = areas

    @property
    def zones(self):
        """Gets the zones of this InlineResponse200.  # noqa: E501

        Active alerts by NWS public zone or county code  # noqa: E501

        :return: The zones of this InlineResponse200.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """Sets the zones of this InlineResponse200.

        Active alerts by NWS public zone or county code  # noqa: E501

        :param zones: The zones of this InlineResponse200.  # noqa: E501
        :type: dict(str, int)
        """

        self._zones = zones

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
