# coding: utf-8

"""
    weather.gov API

    weather.gov API  # noqa: E501

    OpenAPI spec version: 1.8.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GridpointHazardsValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'phenomenon': 'str',
        'significance': 'str',
        'event_number': 'int'
    }

    attribute_map = {
        'phenomenon': 'phenomenon',
        'significance': 'significance',
        'event_number': 'event_number'
    }

    def __init__(self, phenomenon=None, significance=None, event_number=None):  # noqa: E501
        """GridpointHazardsValue - a model defined in Swagger"""  # noqa: E501
        self._phenomenon = None
        self._significance = None
        self._event_number = None
        self.discriminator = None
        self.phenomenon = phenomenon
        self.significance = significance
        self.event_number = event_number

    @property
    def phenomenon(self):
        """Gets the phenomenon of this GridpointHazardsValue.  # noqa: E501

        Hazard code. This value will correspond to a P-VTEC phenomenon code as defined in NWS Directive 10-1703.   # noqa: E501

        :return: The phenomenon of this GridpointHazardsValue.  # noqa: E501
        :rtype: str
        """
        return self._phenomenon

    @phenomenon.setter
    def phenomenon(self, phenomenon):
        """Sets the phenomenon of this GridpointHazardsValue.

        Hazard code. This value will correspond to a P-VTEC phenomenon code as defined in NWS Directive 10-1703.   # noqa: E501

        :param phenomenon: The phenomenon of this GridpointHazardsValue.  # noqa: E501
        :type: str
        """
        if phenomenon is None:
            raise ValueError("Invalid value for `phenomenon`, must not be `None`")  # noqa: E501

        self._phenomenon = phenomenon

    @property
    def significance(self):
        """Gets the significance of this GridpointHazardsValue.  # noqa: E501

        Significance code. This value will correspond to a P-VTEC significance code as defined in NWS Directive 10-1703. This will most frequently be \"A\" for a watch or \"Y\" for an advisory.   # noqa: E501

        :return: The significance of this GridpointHazardsValue.  # noqa: E501
        :rtype: str
        """
        return self._significance

    @significance.setter
    def significance(self, significance):
        """Sets the significance of this GridpointHazardsValue.

        Significance code. This value will correspond to a P-VTEC significance code as defined in NWS Directive 10-1703. This will most frequently be \"A\" for a watch or \"Y\" for an advisory.   # noqa: E501

        :param significance: The significance of this GridpointHazardsValue.  # noqa: E501
        :type: str
        """
        if significance is None:
            raise ValueError("Invalid value for `significance`, must not be `None`")  # noqa: E501

        self._significance = significance

    @property
    def event_number(self):
        """Gets the event_number of this GridpointHazardsValue.  # noqa: E501

        Event number. If this hazard refers to a national or regional center product (such as a Storm Prediction Center convective watch), this value will be the sequence number of that product.   # noqa: E501

        :return: The event_number of this GridpointHazardsValue.  # noqa: E501
        :rtype: int
        """
        return self._event_number

    @event_number.setter
    def event_number(self, event_number):
        """Sets the event_number of this GridpointHazardsValue.

        Event number. If this hazard refers to a national or regional center product (such as a Storm Prediction Center convective watch), this value will be the sequence number of that product.   # noqa: E501

        :param event_number: The event_number of this GridpointHazardsValue.  # noqa: E501
        :type: int
        """
        if event_number is None:
            raise ValueError("Invalid value for `event_number`, must not be `None`")  # noqa: E501

        self._event_number = event_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GridpointHazardsValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GridpointHazardsValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
