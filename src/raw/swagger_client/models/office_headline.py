# coding: utf-8

"""
    weather.gov API

    weather.gov API  # noqa: E501

    OpenAPI spec version: 1.8.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OfficeHeadline(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'JsonLdContext',
        'id': 'str',
        'id': 'str',
        'office': 'str',
        'important': 'bool',
        'issuance_time': 'datetime',
        'link': 'str',
        'name': 'str',
        'title': 'str',
        'summary': 'str',
        'content': 'str'
    }

    attribute_map = {
        'context': '@context',
        'id': '@id',
        'id': 'id',
        'office': 'office',
        'important': 'important',
        'issuance_time': 'issuanceTime',
        'link': 'link',
        'name': 'name',
        'title': 'title',
        'summary': 'summary',
        'content': 'content'
    }

    def __init__(self, context=None, id=None, office=None, important=None, issuance_time=None, link=None, name=None, title=None, summary=None, content=None):  # noqa: E501
        """OfficeHeadline - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._id = None
        self._id = None
        self._office = None
        self._important = None
        self._issuance_time = None
        self._link = None
        self._name = None
        self._title = None
        self._summary = None
        self._content = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if id is not None:
            self.id = id
        if id is not None:
            self.id = id
        if office is not None:
            self.office = office
        if important is not None:
            self.important = important
        if issuance_time is not None:
            self.issuance_time = issuance_time
        if link is not None:
            self.link = link
        if name is not None:
            self.name = name
        if title is not None:
            self.title = title
        if summary is not None:
            self.summary = summary
        if content is not None:
            self.content = content

    @property
    def context(self):
        """Gets the context of this OfficeHeadline.  # noqa: E501


        :return: The context of this OfficeHeadline.  # noqa: E501
        :rtype: JsonLdContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this OfficeHeadline.


        :param context: The context of this OfficeHeadline.  # noqa: E501
        :type: JsonLdContext
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this OfficeHeadline.  # noqa: E501


        :return: The id of this OfficeHeadline.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OfficeHeadline.


        :param id: The id of this OfficeHeadline.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def id(self):
        """Gets the id of this OfficeHeadline.  # noqa: E501


        :return: The id of this OfficeHeadline.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OfficeHeadline.


        :param id: The id of this OfficeHeadline.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def office(self):
        """Gets the office of this OfficeHeadline.  # noqa: E501


        :return: The office of this OfficeHeadline.  # noqa: E501
        :rtype: str
        """
        return self._office

    @office.setter
    def office(self, office):
        """Sets the office of this OfficeHeadline.


        :param office: The office of this OfficeHeadline.  # noqa: E501
        :type: str
        """

        self._office = office

    @property
    def important(self):
        """Gets the important of this OfficeHeadline.  # noqa: E501


        :return: The important of this OfficeHeadline.  # noqa: E501
        :rtype: bool
        """
        return self._important

    @important.setter
    def important(self, important):
        """Sets the important of this OfficeHeadline.


        :param important: The important of this OfficeHeadline.  # noqa: E501
        :type: bool
        """

        self._important = important

    @property
    def issuance_time(self):
        """Gets the issuance_time of this OfficeHeadline.  # noqa: E501


        :return: The issuance_time of this OfficeHeadline.  # noqa: E501
        :rtype: datetime
        """
        return self._issuance_time

    @issuance_time.setter
    def issuance_time(self, issuance_time):
        """Sets the issuance_time of this OfficeHeadline.


        :param issuance_time: The issuance_time of this OfficeHeadline.  # noqa: E501
        :type: datetime
        """

        self._issuance_time = issuance_time

    @property
    def link(self):
        """Gets the link of this OfficeHeadline.  # noqa: E501


        :return: The link of this OfficeHeadline.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this OfficeHeadline.


        :param link: The link of this OfficeHeadline.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def name(self):
        """Gets the name of this OfficeHeadline.  # noqa: E501


        :return: The name of this OfficeHeadline.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OfficeHeadline.


        :param name: The name of this OfficeHeadline.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def title(self):
        """Gets the title of this OfficeHeadline.  # noqa: E501


        :return: The title of this OfficeHeadline.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this OfficeHeadline.


        :param title: The title of this OfficeHeadline.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def summary(self):
        """Gets the summary of this OfficeHeadline.  # noqa: E501


        :return: The summary of this OfficeHeadline.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this OfficeHeadline.


        :param summary: The summary of this OfficeHeadline.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def content(self):
        """Gets the content of this OfficeHeadline.  # noqa: E501


        :return: The content of this OfficeHeadline.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this OfficeHeadline.


        :param content: The content of this OfficeHeadline.  # noqa: E501
        :type: str
        """

        self._content = content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OfficeHeadline, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OfficeHeadline):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
