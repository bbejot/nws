# coding: utf-8

"""
    weather.gov API

    weather.gov API  # noqa: E501

    OpenAPI spec version: 1.8.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GridpointForecast(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'JsonLdContext',
        'geometry': 'GeometryString',
        'units': 'GridpointForecastUnits',
        'forecast_generator': 'str',
        'generated_at': 'datetime',
        'update_time': 'datetime',
        'updated': 'datetime',
        'valid_times': 'ISO8601Interval',
        'elevation': 'QuantitativeValue',
        'periods': 'list[GridpointForecastPeriod]'
    }

    attribute_map = {
        'context': '@context',
        'geometry': 'geometry',
        'units': 'units',
        'forecast_generator': 'forecastGenerator',
        'generated_at': 'generatedAt',
        'update_time': 'updateTime',
        'updated': 'updated',
        'valid_times': 'validTimes',
        'elevation': 'elevation',
        'periods': 'periods'
    }

    def __init__(self, context=None, geometry=None, units=None, forecast_generator=None, generated_at=None, update_time=None, updated=None, valid_times=None, elevation=None, periods=None):  # noqa: E501
        """GridpointForecast - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._geometry = None
        self._units = None
        self._forecast_generator = None
        self._generated_at = None
        self._update_time = None
        self._updated = None
        self._valid_times = None
        self._elevation = None
        self._periods = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if geometry is not None:
            self.geometry = geometry
        if units is not None:
            self.units = units
        if forecast_generator is not None:
            self.forecast_generator = forecast_generator
        if generated_at is not None:
            self.generated_at = generated_at
        if update_time is not None:
            self.update_time = update_time
        if updated is not None:
            self.updated = updated
        if valid_times is not None:
            self.valid_times = valid_times
        if elevation is not None:
            self.elevation = elevation
        if periods is not None:
            self.periods = periods

    @property
    def context(self):
        """Gets the context of this GridpointForecast.  # noqa: E501


        :return: The context of this GridpointForecast.  # noqa: E501
        :rtype: JsonLdContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this GridpointForecast.


        :param context: The context of this GridpointForecast.  # noqa: E501
        :type: JsonLdContext
        """

        self._context = context

    @property
    def geometry(self):
        """Gets the geometry of this GridpointForecast.  # noqa: E501


        :return: The geometry of this GridpointForecast.  # noqa: E501
        :rtype: GeometryString
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this GridpointForecast.


        :param geometry: The geometry of this GridpointForecast.  # noqa: E501
        :type: GeometryString
        """

        self._geometry = geometry

    @property
    def units(self):
        """Gets the units of this GridpointForecast.  # noqa: E501


        :return: The units of this GridpointForecast.  # noqa: E501
        :rtype: GridpointForecastUnits
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this GridpointForecast.


        :param units: The units of this GridpointForecast.  # noqa: E501
        :type: GridpointForecastUnits
        """

        self._units = units

    @property
    def forecast_generator(self):
        """Gets the forecast_generator of this GridpointForecast.  # noqa: E501

        The internal generator class used to create the forecast text (used for NWS debugging).  # noqa: E501

        :return: The forecast_generator of this GridpointForecast.  # noqa: E501
        :rtype: str
        """
        return self._forecast_generator

    @forecast_generator.setter
    def forecast_generator(self, forecast_generator):
        """Sets the forecast_generator of this GridpointForecast.

        The internal generator class used to create the forecast text (used for NWS debugging).  # noqa: E501

        :param forecast_generator: The forecast_generator of this GridpointForecast.  # noqa: E501
        :type: str
        """

        self._forecast_generator = forecast_generator

    @property
    def generated_at(self):
        """Gets the generated_at of this GridpointForecast.  # noqa: E501

        The time this forecast data was generated.  # noqa: E501

        :return: The generated_at of this GridpointForecast.  # noqa: E501
        :rtype: datetime
        """
        return self._generated_at

    @generated_at.setter
    def generated_at(self, generated_at):
        """Sets the generated_at of this GridpointForecast.

        The time this forecast data was generated.  # noqa: E501

        :param generated_at: The generated_at of this GridpointForecast.  # noqa: E501
        :type: datetime
        """

        self._generated_at = generated_at

    @property
    def update_time(self):
        """Gets the update_time of this GridpointForecast.  # noqa: E501

        The last update time of the data this forecast was generated from.  # noqa: E501

        :return: The update_time of this GridpointForecast.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GridpointForecast.

        The last update time of the data this forecast was generated from.  # noqa: E501

        :param update_time: The update_time of this GridpointForecast.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    @property
    def updated(self):
        """Gets the updated of this GridpointForecast.  # noqa: E501

        This property is deprecated (use updateTime instead).  # noqa: E501

        :return: The updated of this GridpointForecast.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this GridpointForecast.

        This property is deprecated (use updateTime instead).  # noqa: E501

        :param updated: The updated of this GridpointForecast.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def valid_times(self):
        """Gets the valid_times of this GridpointForecast.  # noqa: E501


        :return: The valid_times of this GridpointForecast.  # noqa: E501
        :rtype: ISO8601Interval
        """
        return self._valid_times

    @valid_times.setter
    def valid_times(self, valid_times):
        """Sets the valid_times of this GridpointForecast.


        :param valid_times: The valid_times of this GridpointForecast.  # noqa: E501
        :type: ISO8601Interval
        """

        self._valid_times = valid_times

    @property
    def elevation(self):
        """Gets the elevation of this GridpointForecast.  # noqa: E501


        :return: The elevation of this GridpointForecast.  # noqa: E501
        :rtype: QuantitativeValue
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation):
        """Sets the elevation of this GridpointForecast.


        :param elevation: The elevation of this GridpointForecast.  # noqa: E501
        :type: QuantitativeValue
        """

        self._elevation = elevation

    @property
    def periods(self):
        """Gets the periods of this GridpointForecast.  # noqa: E501

        An array of forecast periods.  # noqa: E501

        :return: The periods of this GridpointForecast.  # noqa: E501
        :rtype: list[GridpointForecastPeriod]
        """
        return self._periods

    @periods.setter
    def periods(self, periods):
        """Sets the periods of this GridpointForecast.

        An array of forecast periods.  # noqa: E501

        :param periods: The periods of this GridpointForecast.  # noqa: E501
        :type: list[GridpointForecastPeriod]
        """

        self._periods = periods

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GridpointForecast, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GridpointForecast):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
