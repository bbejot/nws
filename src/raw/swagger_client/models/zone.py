# coding: utf-8

"""
    weather.gov API

    weather.gov API  # noqa: E501

    OpenAPI spec version: 1.8.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Zone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'JsonLdContext',
        'geometry': 'GeometryString',
        'id': 'str',
        'type': 'str',
        'id': 'NWSZoneID',
        'type': 'NWSZoneType',
        'name': 'str',
        'effective_date': 'datetime',
        'expiration_date': 'datetime',
        'state': 'OneOfZoneState',
        'cwa': 'list[NWSForecastOfficeId]',
        'forecast_offices': 'list[str]',
        'time_zone': 'list[str]',
        'observation_stations': 'list[str]',
        'radar_station': 'str'
    }

    attribute_map = {
        'context': '@context',
        'geometry': 'geometry',
        'id': '@id',
        'type': '@type',
        'id': 'id',
        'type': 'type',
        'name': 'name',
        'effective_date': 'effectiveDate',
        'expiration_date': 'expirationDate',
        'state': 'state',
        'cwa': 'cwa',
        'forecast_offices': 'forecastOffices',
        'time_zone': 'timeZone',
        'observation_stations': 'observationStations',
        'radar_station': 'radarStation'
    }

    def __init__(self, context=None, geometry=None, id=None, type=None, name=None, effective_date=None, expiration_date=None, state=None, cwa=None, forecast_offices=None, time_zone=None, observation_stations=None, radar_station=None):  # noqa: E501
        """Zone - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._geometry = None
        self._id = None
        self._type = None
        self._id = None
        self._type = None
        self._name = None
        self._effective_date = None
        self._expiration_date = None
        self._state = None
        self._cwa = None
        self._forecast_offices = None
        self._time_zone = None
        self._observation_stations = None
        self._radar_station = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if geometry is not None:
            self.geometry = geometry
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if effective_date is not None:
            self.effective_date = effective_date
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if state is not None:
            self.state = state
        if cwa is not None:
            self.cwa = cwa
        if forecast_offices is not None:
            self.forecast_offices = forecast_offices
        if time_zone is not None:
            self.time_zone = time_zone
        if observation_stations is not None:
            self.observation_stations = observation_stations
        if radar_station is not None:
            self.radar_station = radar_station

    @property
    def context(self):
        """Gets the context of this Zone.  # noqa: E501


        :return: The context of this Zone.  # noqa: E501
        :rtype: JsonLdContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this Zone.


        :param context: The context of this Zone.  # noqa: E501
        :type: JsonLdContext
        """

        self._context = context

    @property
    def geometry(self):
        """Gets the geometry of this Zone.  # noqa: E501


        :return: The geometry of this Zone.  # noqa: E501
        :rtype: GeometryString
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this Zone.


        :param geometry: The geometry of this Zone.  # noqa: E501
        :type: GeometryString
        """

        self._geometry = geometry

    @property
    def id(self):
        """Gets the id of this Zone.  # noqa: E501


        :return: The id of this Zone.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Zone.


        :param id: The id of this Zone.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Zone.  # noqa: E501


        :return: The type of this Zone.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Zone.


        :param type: The type of this Zone.  # noqa: E501
        :type: str
        """
        allowed_values = ["wx:Zone"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this Zone.  # noqa: E501


        :return: The id of this Zone.  # noqa: E501
        :rtype: NWSZoneID
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Zone.


        :param id: The id of this Zone.  # noqa: E501
        :type: NWSZoneID
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Zone.  # noqa: E501


        :return: The type of this Zone.  # noqa: E501
        :rtype: NWSZoneType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Zone.


        :param type: The type of this Zone.  # noqa: E501
        :type: NWSZoneType
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this Zone.  # noqa: E501


        :return: The name of this Zone.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Zone.


        :param name: The name of this Zone.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def effective_date(self):
        """Gets the effective_date of this Zone.  # noqa: E501


        :return: The effective_date of this Zone.  # noqa: E501
        :rtype: datetime
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this Zone.


        :param effective_date: The effective_date of this Zone.  # noqa: E501
        :type: datetime
        """

        self._effective_date = effective_date

    @property
    def expiration_date(self):
        """Gets the expiration_date of this Zone.  # noqa: E501


        :return: The expiration_date of this Zone.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this Zone.


        :param expiration_date: The expiration_date of this Zone.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def state(self):
        """Gets the state of this Zone.  # noqa: E501


        :return: The state of this Zone.  # noqa: E501
        :rtype: OneOfZoneState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Zone.


        :param state: The state of this Zone.  # noqa: E501
        :type: OneOfZoneState
        """

        self._state = state

    @property
    def cwa(self):
        """Gets the cwa of this Zone.  # noqa: E501


        :return: The cwa of this Zone.  # noqa: E501
        :rtype: list[NWSForecastOfficeId]
        """
        return self._cwa

    @cwa.setter
    def cwa(self, cwa):
        """Sets the cwa of this Zone.


        :param cwa: The cwa of this Zone.  # noqa: E501
        :type: list[NWSForecastOfficeId]
        """

        self._cwa = cwa

    @property
    def forecast_offices(self):
        """Gets the forecast_offices of this Zone.  # noqa: E501


        :return: The forecast_offices of this Zone.  # noqa: E501
        :rtype: list[str]
        """
        return self._forecast_offices

    @forecast_offices.setter
    def forecast_offices(self, forecast_offices):
        """Sets the forecast_offices of this Zone.


        :param forecast_offices: The forecast_offices of this Zone.  # noqa: E501
        :type: list[str]
        """

        self._forecast_offices = forecast_offices

    @property
    def time_zone(self):
        """Gets the time_zone of this Zone.  # noqa: E501


        :return: The time_zone of this Zone.  # noqa: E501
        :rtype: list[str]
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Zone.


        :param time_zone: The time_zone of this Zone.  # noqa: E501
        :type: list[str]
        """

        self._time_zone = time_zone

    @property
    def observation_stations(self):
        """Gets the observation_stations of this Zone.  # noqa: E501


        :return: The observation_stations of this Zone.  # noqa: E501
        :rtype: list[str]
        """
        return self._observation_stations

    @observation_stations.setter
    def observation_stations(self, observation_stations):
        """Sets the observation_stations of this Zone.


        :param observation_stations: The observation_stations of this Zone.  # noqa: E501
        :type: list[str]
        """

        self._observation_stations = observation_stations

    @property
    def radar_station(self):
        """Gets the radar_station of this Zone.  # noqa: E501


        :return: The radar_station of this Zone.  # noqa: E501
        :rtype: str
        """
        return self._radar_station

    @radar_station.setter
    def radar_station(self, radar_station):
        """Sets the radar_station of this Zone.


        :param radar_station: The radar_station of this Zone.  # noqa: E501
        :type: str
        """

        self._radar_station = radar_station

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Zone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Zone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
