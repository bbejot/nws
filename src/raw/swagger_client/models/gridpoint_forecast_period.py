# coding: utf-8

"""
    weather.gov API

    weather.gov API  # noqa: E501

    OpenAPI spec version: 1.8.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GridpointForecastPeriod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number': 'int',
        'name': 'str',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'is_daytime': 'bool',
        'temperature': 'OneOfGridpointForecastPeriodTemperature',
        'temperature_unit': 'str',
        'temperature_trend': 'str',
        'wind_speed': 'OneOfGridpointForecastPeriodWindSpeed',
        'wind_gust': 'OneOfGridpointForecastPeriodWindGust',
        'wind_direction': 'str',
        'icon': 'str',
        'short_forecast': 'str',
        'detailed_forecast': 'str'
    }

    attribute_map = {
        'number': 'number',
        'name': 'name',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'is_daytime': 'isDaytime',
        'temperature': 'temperature',
        'temperature_unit': 'temperatureUnit',
        'temperature_trend': 'temperatureTrend',
        'wind_speed': 'windSpeed',
        'wind_gust': 'windGust',
        'wind_direction': 'windDirection',
        'icon': 'icon',
        'short_forecast': 'shortForecast',
        'detailed_forecast': 'detailedForecast'
    }

    def __init__(self, number=None, name=None, start_time=None, end_time=None, is_daytime=None, temperature=None, temperature_unit=None, temperature_trend=None, wind_speed=None, wind_gust=None, wind_direction=None, icon=None, short_forecast=None, detailed_forecast=None):  # noqa: E501
        """GridpointForecastPeriod - a model defined in Swagger"""  # noqa: E501
        self._number = None
        self._name = None
        self._start_time = None
        self._end_time = None
        self._is_daytime = None
        self._temperature = None
        self._temperature_unit = None
        self._temperature_trend = None
        self._wind_speed = None
        self._wind_gust = None
        self._wind_direction = None
        self._icon = None
        self._short_forecast = None
        self._detailed_forecast = None
        self.discriminator = None
        if number is not None:
            self.number = number
        if name is not None:
            self.name = name
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if is_daytime is not None:
            self.is_daytime = is_daytime
        if temperature is not None:
            self.temperature = temperature
        if temperature_unit is not None:
            self.temperature_unit = temperature_unit
        if temperature_trend is not None:
            self.temperature_trend = temperature_trend
        if wind_speed is not None:
            self.wind_speed = wind_speed
        if wind_gust is not None:
            self.wind_gust = wind_gust
        if wind_direction is not None:
            self.wind_direction = wind_direction
        if icon is not None:
            self.icon = icon
        if short_forecast is not None:
            self.short_forecast = short_forecast
        if detailed_forecast is not None:
            self.detailed_forecast = detailed_forecast

    @property
    def number(self):
        """Gets the number of this GridpointForecastPeriod.  # noqa: E501

        Sequential period number.  # noqa: E501

        :return: The number of this GridpointForecastPeriod.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this GridpointForecastPeriod.

        Sequential period number.  # noqa: E501

        :param number: The number of this GridpointForecastPeriod.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def name(self):
        """Gets the name of this GridpointForecastPeriod.  # noqa: E501

        A textual identifier for the period. This value will not be present for hourly forecasts.   # noqa: E501

        :return: The name of this GridpointForecastPeriod.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GridpointForecastPeriod.

        A textual identifier for the period. This value will not be present for hourly forecasts.   # noqa: E501

        :param name: The name of this GridpointForecastPeriod.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def start_time(self):
        """Gets the start_time of this GridpointForecastPeriod.  # noqa: E501

        The starting time that this forecast period is valid for.  # noqa: E501

        :return: The start_time of this GridpointForecastPeriod.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GridpointForecastPeriod.

        The starting time that this forecast period is valid for.  # noqa: E501

        :param start_time: The start_time of this GridpointForecastPeriod.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this GridpointForecastPeriod.  # noqa: E501

        The ending time that this forecast period is valid for.  # noqa: E501

        :return: The end_time of this GridpointForecastPeriod.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GridpointForecastPeriod.

        The ending time that this forecast period is valid for.  # noqa: E501

        :param end_time: The end_time of this GridpointForecastPeriod.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def is_daytime(self):
        """Gets the is_daytime of this GridpointForecastPeriod.  # noqa: E501

        Indicates whether this period is daytime or nighttime.  # noqa: E501

        :return: The is_daytime of this GridpointForecastPeriod.  # noqa: E501
        :rtype: bool
        """
        return self._is_daytime

    @is_daytime.setter
    def is_daytime(self, is_daytime):
        """Sets the is_daytime of this GridpointForecastPeriod.

        Indicates whether this period is daytime or nighttime.  # noqa: E501

        :param is_daytime: The is_daytime of this GridpointForecastPeriod.  # noqa: E501
        :type: bool
        """

        self._is_daytime = is_daytime

    @property
    def temperature(self):
        """Gets the temperature of this GridpointForecastPeriod.  # noqa: E501

        High/low temperature for the period, depending on whether the period is day or night. This property as an integer value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the \"forecast_temperature_qv\" feature flag on the request.   # noqa: E501

        :return: The temperature of this GridpointForecastPeriod.  # noqa: E501
        :rtype: OneOfGridpointForecastPeriodTemperature
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this GridpointForecastPeriod.

        High/low temperature for the period, depending on whether the period is day or night. This property as an integer value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the \"forecast_temperature_qv\" feature flag on the request.   # noqa: E501

        :param temperature: The temperature of this GridpointForecastPeriod.  # noqa: E501
        :type: OneOfGridpointForecastPeriodTemperature
        """

        self._temperature = temperature

    @property
    def temperature_unit(self):
        """Gets the temperature_unit of this GridpointForecastPeriod.  # noqa: E501

        The unit of the temperature value (Fahrenheit or Celsius). This property is deprecated. Future versions will indicate the unit within the quantitative value object for the temperature property. To make use of the future standard format now, set the \"forecast_temperature_qv\" feature flag on the request.   # noqa: E501

        :return: The temperature_unit of this GridpointForecastPeriod.  # noqa: E501
        :rtype: str
        """
        return self._temperature_unit

    @temperature_unit.setter
    def temperature_unit(self, temperature_unit):
        """Sets the temperature_unit of this GridpointForecastPeriod.

        The unit of the temperature value (Fahrenheit or Celsius). This property is deprecated. Future versions will indicate the unit within the quantitative value object for the temperature property. To make use of the future standard format now, set the \"forecast_temperature_qv\" feature flag on the request.   # noqa: E501

        :param temperature_unit: The temperature_unit of this GridpointForecastPeriod.  # noqa: E501
        :type: str
        """
        allowed_values = ["F", "C"]  # noqa: E501
        if temperature_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `temperature_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(temperature_unit, allowed_values)
            )

        self._temperature_unit = temperature_unit

    @property
    def temperature_trend(self):
        """Gets the temperature_trend of this GridpointForecastPeriod.  # noqa: E501

        If not null, indicates a non-diurnal temperature trend for the period (either rising temperature overnight, or falling temperature during the day)   # noqa: E501

        :return: The temperature_trend of this GridpointForecastPeriod.  # noqa: E501
        :rtype: str
        """
        return self._temperature_trend

    @temperature_trend.setter
    def temperature_trend(self, temperature_trend):
        """Sets the temperature_trend of this GridpointForecastPeriod.

        If not null, indicates a non-diurnal temperature trend for the period (either rising temperature overnight, or falling temperature during the day)   # noqa: E501

        :param temperature_trend: The temperature_trend of this GridpointForecastPeriod.  # noqa: E501
        :type: str
        """
        allowed_values = ["rising", "falling"]  # noqa: E501
        if temperature_trend not in allowed_values:
            raise ValueError(
                "Invalid value for `temperature_trend` ({0}), must be one of {1}"  # noqa: E501
                .format(temperature_trend, allowed_values)
            )

        self._temperature_trend = temperature_trend

    @property
    def wind_speed(self):
        """Gets the wind_speed of this GridpointForecastPeriod.  # noqa: E501

        Wind speed for the period. This property as an string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the \"forecast_wind_speed_qv\" feature flag on the request.   # noqa: E501

        :return: The wind_speed of this GridpointForecastPeriod.  # noqa: E501
        :rtype: OneOfGridpointForecastPeriodWindSpeed
        """
        return self._wind_speed

    @wind_speed.setter
    def wind_speed(self, wind_speed):
        """Sets the wind_speed of this GridpointForecastPeriod.

        Wind speed for the period. This property as an string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the \"forecast_wind_speed_qv\" feature flag on the request.   # noqa: E501

        :param wind_speed: The wind_speed of this GridpointForecastPeriod.  # noqa: E501
        :type: OneOfGridpointForecastPeriodWindSpeed
        """

        self._wind_speed = wind_speed

    @property
    def wind_gust(self):
        """Gets the wind_gust of this GridpointForecastPeriod.  # noqa: E501

        Peak wind gust for the period. This property as an string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the \"forecast_wind_speed_qv\" feature flag on the request.   # noqa: E501

        :return: The wind_gust of this GridpointForecastPeriod.  # noqa: E501
        :rtype: OneOfGridpointForecastPeriodWindGust
        """
        return self._wind_gust

    @wind_gust.setter
    def wind_gust(self, wind_gust):
        """Sets the wind_gust of this GridpointForecastPeriod.

        Peak wind gust for the period. This property as an string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the \"forecast_wind_speed_qv\" feature flag on the request.   # noqa: E501

        :param wind_gust: The wind_gust of this GridpointForecastPeriod.  # noqa: E501
        :type: OneOfGridpointForecastPeriodWindGust
        """

        self._wind_gust = wind_gust

    @property
    def wind_direction(self):
        """Gets the wind_direction of this GridpointForecastPeriod.  # noqa: E501

        The prevailing direction of the wind for the period, using a 16-point compass.  # noqa: E501

        :return: The wind_direction of this GridpointForecastPeriod.  # noqa: E501
        :rtype: str
        """
        return self._wind_direction

    @wind_direction.setter
    def wind_direction(self, wind_direction):
        """Sets the wind_direction of this GridpointForecastPeriod.

        The prevailing direction of the wind for the period, using a 16-point compass.  # noqa: E501

        :param wind_direction: The wind_direction of this GridpointForecastPeriod.  # noqa: E501
        :type: str
        """
        allowed_values = ["N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE", "S", "SSW", "SW", "WSW", "W", "WNW", "NW", "NNW"]  # noqa: E501
        if wind_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `wind_direction` ({0}), must be one of {1}"  # noqa: E501
                .format(wind_direction, allowed_values)
            )

        self._wind_direction = wind_direction

    @property
    def icon(self):
        """Gets the icon of this GridpointForecastPeriod.  # noqa: E501

        A link to an icon representing the forecast summary.  # noqa: E501

        :return: The icon of this GridpointForecastPeriod.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this GridpointForecastPeriod.

        A link to an icon representing the forecast summary.  # noqa: E501

        :param icon: The icon of this GridpointForecastPeriod.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def short_forecast(self):
        """Gets the short_forecast of this GridpointForecastPeriod.  # noqa: E501

        A brief textual forecast summary for the period.  # noqa: E501

        :return: The short_forecast of this GridpointForecastPeriod.  # noqa: E501
        :rtype: str
        """
        return self._short_forecast

    @short_forecast.setter
    def short_forecast(self, short_forecast):
        """Sets the short_forecast of this GridpointForecastPeriod.

        A brief textual forecast summary for the period.  # noqa: E501

        :param short_forecast: The short_forecast of this GridpointForecastPeriod.  # noqa: E501
        :type: str
        """

        self._short_forecast = short_forecast

    @property
    def detailed_forecast(self):
        """Gets the detailed_forecast of this GridpointForecastPeriod.  # noqa: E501

        A detailed textual forecast for the period.  # noqa: E501

        :return: The detailed_forecast of this GridpointForecastPeriod.  # noqa: E501
        :rtype: str
        """
        return self._detailed_forecast

    @detailed_forecast.setter
    def detailed_forecast(self, detailed_forecast):
        """Sets the detailed_forecast of this GridpointForecastPeriod.

        A detailed textual forecast for the period.  # noqa: E501

        :param detailed_forecast: The detailed_forecast of this GridpointForecastPeriod.  # noqa: E501
        :type: str
        """

        self._detailed_forecast = detailed_forecast

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GridpointForecastPeriod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GridpointForecastPeriod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
