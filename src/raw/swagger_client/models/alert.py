# coding: utf-8

"""
    weather.gov API

    weather.gov API  # noqa: E501

    OpenAPI spec version: 1.8.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Alert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'AlertId',
        'area_desc': 'str',
        'geocode': 'AlertGeocode',
        'affected_zones': 'list[str]',
        'references': 'list[AlertReferences]',
        'sent': 'datetime',
        'effective': 'datetime',
        'onset': 'datetime',
        'expires': 'datetime',
        'ends': 'datetime',
        'status': 'AlertStatus',
        'message_type': 'AlertMessageType',
        'category': 'str',
        'severity': 'AlertSeverity',
        'certainty': 'AlertCertainty',
        'urgency': 'AlertUrgency',
        'event': 'str',
        'sender': 'str',
        'sender_name': 'str',
        'headline': 'str',
        'description': 'str',
        'instruction': 'str',
        'response': 'str',
        'parameters': 'dict(str, list[object])'
    }

    attribute_map = {
        'id': 'id',
        'area_desc': 'areaDesc',
        'geocode': 'geocode',
        'affected_zones': 'affectedZones',
        'references': 'references',
        'sent': 'sent',
        'effective': 'effective',
        'onset': 'onset',
        'expires': 'expires',
        'ends': 'ends',
        'status': 'status',
        'message_type': 'messageType',
        'category': 'category',
        'severity': 'severity',
        'certainty': 'certainty',
        'urgency': 'urgency',
        'event': 'event',
        'sender': 'sender',
        'sender_name': 'senderName',
        'headline': 'headline',
        'description': 'description',
        'instruction': 'instruction',
        'response': 'response',
        'parameters': 'parameters'
    }

    def __init__(self, id=None, area_desc=None, geocode=None, affected_zones=None, references=None, sent=None, effective=None, onset=None, expires=None, ends=None, status=None, message_type=None, category=None, severity=None, certainty=None, urgency=None, event=None, sender=None, sender_name=None, headline=None, description=None, instruction=None, response=None, parameters=None):  # noqa: E501
        """Alert - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._area_desc = None
        self._geocode = None
        self._affected_zones = None
        self._references = None
        self._sent = None
        self._effective = None
        self._onset = None
        self._expires = None
        self._ends = None
        self._status = None
        self._message_type = None
        self._category = None
        self._severity = None
        self._certainty = None
        self._urgency = None
        self._event = None
        self._sender = None
        self._sender_name = None
        self._headline = None
        self._description = None
        self._instruction = None
        self._response = None
        self._parameters = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if area_desc is not None:
            self.area_desc = area_desc
        if geocode is not None:
            self.geocode = geocode
        if affected_zones is not None:
            self.affected_zones = affected_zones
        if references is not None:
            self.references = references
        if sent is not None:
            self.sent = sent
        if effective is not None:
            self.effective = effective
        if onset is not None:
            self.onset = onset
        if expires is not None:
            self.expires = expires
        if ends is not None:
            self.ends = ends
        if status is not None:
            self.status = status
        if message_type is not None:
            self.message_type = message_type
        if category is not None:
            self.category = category
        if severity is not None:
            self.severity = severity
        if certainty is not None:
            self.certainty = certainty
        if urgency is not None:
            self.urgency = urgency
        if event is not None:
            self.event = event
        if sender is not None:
            self.sender = sender
        if sender_name is not None:
            self.sender_name = sender_name
        if headline is not None:
            self.headline = headline
        if description is not None:
            self.description = description
        if instruction is not None:
            self.instruction = instruction
        if response is not None:
            self.response = response
        if parameters is not None:
            self.parameters = parameters

    @property
    def id(self):
        """Gets the id of this Alert.  # noqa: E501


        :return: The id of this Alert.  # noqa: E501
        :rtype: AlertId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Alert.


        :param id: The id of this Alert.  # noqa: E501
        :type: AlertId
        """

        self._id = id

    @property
    def area_desc(self):
        """Gets the area_desc of this Alert.  # noqa: E501

        A textual description of the area affected by the alert.  # noqa: E501

        :return: The area_desc of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._area_desc

    @area_desc.setter
    def area_desc(self, area_desc):
        """Sets the area_desc of this Alert.

        A textual description of the area affected by the alert.  # noqa: E501

        :param area_desc: The area_desc of this Alert.  # noqa: E501
        :type: str
        """

        self._area_desc = area_desc

    @property
    def geocode(self):
        """Gets the geocode of this Alert.  # noqa: E501


        :return: The geocode of this Alert.  # noqa: E501
        :rtype: AlertGeocode
        """
        return self._geocode

    @geocode.setter
    def geocode(self, geocode):
        """Sets the geocode of this Alert.


        :param geocode: The geocode of this Alert.  # noqa: E501
        :type: AlertGeocode
        """

        self._geocode = geocode

    @property
    def affected_zones(self):
        """Gets the affected_zones of this Alert.  # noqa: E501

        An array of API links for zones affected by the alert. This is an API-specific extension field and is not part of the CAP specification.   # noqa: E501

        :return: The affected_zones of this Alert.  # noqa: E501
        :rtype: list[str]
        """
        return self._affected_zones

    @affected_zones.setter
    def affected_zones(self, affected_zones):
        """Sets the affected_zones of this Alert.

        An array of API links for zones affected by the alert. This is an API-specific extension field and is not part of the CAP specification.   # noqa: E501

        :param affected_zones: The affected_zones of this Alert.  # noqa: E501
        :type: list[str]
        """

        self._affected_zones = affected_zones

    @property
    def references(self):
        """Gets the references of this Alert.  # noqa: E501

        A list of prior alerts that this alert updates or replaces.  # noqa: E501

        :return: The references of this Alert.  # noqa: E501
        :rtype: list[AlertReferences]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this Alert.

        A list of prior alerts that this alert updates or replaces.  # noqa: E501

        :param references: The references of this Alert.  # noqa: E501
        :type: list[AlertReferences]
        """

        self._references = references

    @property
    def sent(self):
        """Gets the sent of this Alert.  # noqa: E501

        The time of the origination of the alert message.  # noqa: E501

        :return: The sent of this Alert.  # noqa: E501
        :rtype: datetime
        """
        return self._sent

    @sent.setter
    def sent(self, sent):
        """Sets the sent of this Alert.

        The time of the origination of the alert message.  # noqa: E501

        :param sent: The sent of this Alert.  # noqa: E501
        :type: datetime
        """

        self._sent = sent

    @property
    def effective(self):
        """Gets the effective of this Alert.  # noqa: E501

        The effective time of the information of the alert message.  # noqa: E501

        :return: The effective of this Alert.  # noqa: E501
        :rtype: datetime
        """
        return self._effective

    @effective.setter
    def effective(self, effective):
        """Sets the effective of this Alert.

        The effective time of the information of the alert message.  # noqa: E501

        :param effective: The effective of this Alert.  # noqa: E501
        :type: datetime
        """

        self._effective = effective

    @property
    def onset(self):
        """Gets the onset of this Alert.  # noqa: E501

        The expected time of the beginning of the subject event of the alert message.  # noqa: E501

        :return: The onset of this Alert.  # noqa: E501
        :rtype: datetime
        """
        return self._onset

    @onset.setter
    def onset(self, onset):
        """Sets the onset of this Alert.

        The expected time of the beginning of the subject event of the alert message.  # noqa: E501

        :param onset: The onset of this Alert.  # noqa: E501
        :type: datetime
        """

        self._onset = onset

    @property
    def expires(self):
        """Gets the expires of this Alert.  # noqa: E501

        The expiry time of the information of the alert message.  # noqa: E501

        :return: The expires of this Alert.  # noqa: E501
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this Alert.

        The expiry time of the information of the alert message.  # noqa: E501

        :param expires: The expires of this Alert.  # noqa: E501
        :type: datetime
        """

        self._expires = expires

    @property
    def ends(self):
        """Gets the ends of this Alert.  # noqa: E501

        The expected end time of the subject event of the alert message.  # noqa: E501

        :return: The ends of this Alert.  # noqa: E501
        :rtype: datetime
        """
        return self._ends

    @ends.setter
    def ends(self, ends):
        """Sets the ends of this Alert.

        The expected end time of the subject event of the alert message.  # noqa: E501

        :param ends: The ends of this Alert.  # noqa: E501
        :type: datetime
        """

        self._ends = ends

    @property
    def status(self):
        """Gets the status of this Alert.  # noqa: E501


        :return: The status of this Alert.  # noqa: E501
        :rtype: AlertStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Alert.


        :param status: The status of this Alert.  # noqa: E501
        :type: AlertStatus
        """

        self._status = status

    @property
    def message_type(self):
        """Gets the message_type of this Alert.  # noqa: E501


        :return: The message_type of this Alert.  # noqa: E501
        :rtype: AlertMessageType
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this Alert.


        :param message_type: The message_type of this Alert.  # noqa: E501
        :type: AlertMessageType
        """

        self._message_type = message_type

    @property
    def category(self):
        """Gets the category of this Alert.  # noqa: E501

        The code denoting the category of the subject event of the alert message.  # noqa: E501

        :return: The category of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Alert.

        The code denoting the category of the subject event of the alert message.  # noqa: E501

        :param category: The category of this Alert.  # noqa: E501
        :type: str
        """
        allowed_values = ["Met", "Geo", "Safety", "Security", "Rescue", "Fire", "Health", "Env", "Transport", "Infra", "CBRNE", "Other"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def severity(self):
        """Gets the severity of this Alert.  # noqa: E501


        :return: The severity of this Alert.  # noqa: E501
        :rtype: AlertSeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Alert.


        :param severity: The severity of this Alert.  # noqa: E501
        :type: AlertSeverity
        """

        self._severity = severity

    @property
    def certainty(self):
        """Gets the certainty of this Alert.  # noqa: E501


        :return: The certainty of this Alert.  # noqa: E501
        :rtype: AlertCertainty
        """
        return self._certainty

    @certainty.setter
    def certainty(self, certainty):
        """Sets the certainty of this Alert.


        :param certainty: The certainty of this Alert.  # noqa: E501
        :type: AlertCertainty
        """

        self._certainty = certainty

    @property
    def urgency(self):
        """Gets the urgency of this Alert.  # noqa: E501


        :return: The urgency of this Alert.  # noqa: E501
        :rtype: AlertUrgency
        """
        return self._urgency

    @urgency.setter
    def urgency(self, urgency):
        """Sets the urgency of this Alert.


        :param urgency: The urgency of this Alert.  # noqa: E501
        :type: AlertUrgency
        """

        self._urgency = urgency

    @property
    def event(self):
        """Gets the event of this Alert.  # noqa: E501

        The text denoting the type of the subject event of the alert message.  # noqa: E501

        :return: The event of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this Alert.

        The text denoting the type of the subject event of the alert message.  # noqa: E501

        :param event: The event of this Alert.  # noqa: E501
        :type: str
        """

        self._event = event

    @property
    def sender(self):
        """Gets the sender of this Alert.  # noqa: E501

        Email address of the NWS webmaster.  # noqa: E501

        :return: The sender of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this Alert.

        Email address of the NWS webmaster.  # noqa: E501

        :param sender: The sender of this Alert.  # noqa: E501
        :type: str
        """

        self._sender = sender

    @property
    def sender_name(self):
        """Gets the sender_name of this Alert.  # noqa: E501

        The text naming the originator of the alert message.  # noqa: E501

        :return: The sender_name of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._sender_name

    @sender_name.setter
    def sender_name(self, sender_name):
        """Sets the sender_name of this Alert.

        The text naming the originator of the alert message.  # noqa: E501

        :param sender_name: The sender_name of this Alert.  # noqa: E501
        :type: str
        """

        self._sender_name = sender_name

    @property
    def headline(self):
        """Gets the headline of this Alert.  # noqa: E501

        The text headline of the alert message.  # noqa: E501

        :return: The headline of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._headline

    @headline.setter
    def headline(self, headline):
        """Sets the headline of this Alert.

        The text headline of the alert message.  # noqa: E501

        :param headline: The headline of this Alert.  # noqa: E501
        :type: str
        """

        self._headline = headline

    @property
    def description(self):
        """Gets the description of this Alert.  # noqa: E501

        The text describing the subject event of the alert message.  # noqa: E501

        :return: The description of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Alert.

        The text describing the subject event of the alert message.  # noqa: E501

        :param description: The description of this Alert.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def instruction(self):
        """Gets the instruction of this Alert.  # noqa: E501

        The text describing the recommended action to be taken by recipients of the alert message.   # noqa: E501

        :return: The instruction of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._instruction

    @instruction.setter
    def instruction(self, instruction):
        """Sets the instruction of this Alert.

        The text describing the recommended action to be taken by recipients of the alert message.   # noqa: E501

        :param instruction: The instruction of this Alert.  # noqa: E501
        :type: str
        """

        self._instruction = instruction

    @property
    def response(self):
        """Gets the response of this Alert.  # noqa: E501

        The code denoting the type of action recommended for the target audience. This corresponds to responseType in the CAP specification.   # noqa: E501

        :return: The response of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this Alert.

        The code denoting the type of action recommended for the target audience. This corresponds to responseType in the CAP specification.   # noqa: E501

        :param response: The response of this Alert.  # noqa: E501
        :type: str
        """
        allowed_values = ["Shelter", "Evacuate", "Prepare", "Execute", "Avoid", "Monitor", "Assess", "AllClear", "None"]  # noqa: E501
        if response not in allowed_values:
            raise ValueError(
                "Invalid value for `response` ({0}), must be one of {1}"  # noqa: E501
                .format(response, allowed_values)
            )

        self._response = response

    @property
    def parameters(self):
        """Gets the parameters of this Alert.  # noqa: E501

        System-specific additional parameters associated with the alert message. The keys in this object correspond to parameter definitions in the NWS CAP specification.   # noqa: E501

        :return: The parameters of this Alert.  # noqa: E501
        :rtype: dict(str, list[object])
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Alert.

        System-specific additional parameters associated with the alert message. The keys in this object correspond to parameter definitions in the NWS CAP specification.   # noqa: E501

        :param parameters: The parameters of this Alert.  # noqa: E501
        :type: dict(str, list[object])
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Alert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Alert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
