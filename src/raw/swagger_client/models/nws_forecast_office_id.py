# coding: utf-8

"""
    weather.gov API

    weather.gov API  # noqa: E501

    OpenAPI spec version: 1.8.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NWSForecastOfficeId(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    AKQ = "AKQ"
    ALY = "ALY"
    BGM = "BGM"
    BOX = "BOX"
    BTV = "BTV"
    BUF = "BUF"
    CAE = "CAE"
    CAR = "CAR"
    CHS = "CHS"
    CLE = "CLE"
    CTP = "CTP"
    GSP = "GSP"
    GYX = "GYX"
    ILM = "ILM"
    ILN = "ILN"
    LWX = "LWX"
    MHX = "MHX"
    OKX = "OKX"
    PBZ = "PBZ"
    PHI = "PHI"
    RAH = "RAH"
    RLX = "RLX"
    RNK = "RNK"
    ABQ = "ABQ"
    AMA = "AMA"
    BMX = "BMX"
    BRO = "BRO"
    CRP = "CRP"
    EPZ = "EPZ"
    EWX = "EWX"
    FFC = "FFC"
    FWD = "FWD"
    HGX = "HGX"
    HUN = "HUN"
    JAN = "JAN"
    JAX = "JAX"
    KEY = "KEY"
    LCH = "LCH"
    LIX = "LIX"
    LUB = "LUB"
    LZK = "LZK"
    MAF = "MAF"
    MEG = "MEG"
    MFL = "MFL"
    MLB = "MLB"
    MOB = "MOB"
    MRX = "MRX"
    OHX = "OHX"
    OUN = "OUN"
    SHV = "SHV"
    SJT = "SJT"
    SJU = "SJU"
    TAE = "TAE"
    TBW = "TBW"
    TSA = "TSA"
    ABR = "ABR"
    APX = "APX"
    ARX = "ARX"
    BIS = "BIS"
    BOU = "BOU"
    CYS = "CYS"
    DDC = "DDC"
    DLH = "DLH"
    DMX = "DMX"
    DTX = "DTX"
    DVN = "DVN"
    EAX = "EAX"
    FGF = "FGF"
    FSD = "FSD"
    GID = "GID"
    GJT = "GJT"
    GLD = "GLD"
    GRB = "GRB"
    GRR = "GRR"
    ICT = "ICT"
    ILX = "ILX"
    IND = "IND"
    IWX = "IWX"
    JKL = "JKL"
    LBF = "LBF"
    LMK = "LMK"
    LOT = "LOT"
    LSX = "LSX"
    MKX = "MKX"
    MPX = "MPX"
    MQT = "MQT"
    OAX = "OAX"
    PAH = "PAH"
    PUB = "PUB"
    RIW = "RIW"
    SGF = "SGF"
    TOP = "TOP"
    UNR = "UNR"
    BOI = "BOI"
    BYZ = "BYZ"
    EKA = "EKA"
    FGZ = "FGZ"
    GGW = "GGW"
    HNX = "HNX"
    LKN = "LKN"
    LOX = "LOX"
    MFR = "MFR"
    MSO = "MSO"
    MTR = "MTR"
    OTX = "OTX"
    PDT = "PDT"
    PIH = "PIH"
    PQR = "PQR"
    PSR = "PSR"
    REV = "REV"
    SEW = "SEW"
    SGX = "SGX"
    SLC = "SLC"
    STO = "STO"
    TFX = "TFX"
    TWC = "TWC"
    VEF = "VEF"
    AER = "AER"
    AFC = "AFC"
    AFG = "AFG"
    AJK = "AJK"
    ALU = "ALU"
    GUM = "GUM"
    HPA = "HPA"
    HFO = "HFO"
    PPG = "PPG"
    STU = "STU"
    NH1 = "NH1"
    NH2 = "NH2"
    ONA = "ONA"
    ONP = "ONP"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """NWSForecastOfficeId - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NWSForecastOfficeId, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NWSForecastOfficeId):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
