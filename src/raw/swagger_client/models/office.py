# coding: utf-8

"""
    weather.gov API

    weather.gov API  # noqa: E501

    OpenAPI spec version: 1.8.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Office(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'JsonLdContext',
        'type': 'str',
        'id': 'str',
        'id': 'str',
        'name': 'str',
        'address': 'OfficeAddress',
        'telephone': 'str',
        'fax_number': 'str',
        'email': 'str',
        'same_as': 'str',
        'nws_region': 'str',
        'parent_organization': 'str',
        'responsible_counties': 'list[str]',
        'responsible_forecast_zones': 'list[str]',
        'responsible_fire_zones': 'list[str]',
        'approved_observation_stations': 'list[str]'
    }

    attribute_map = {
        'context': '@context',
        'type': '@type',
        'id': '@id',
        'id': 'id',
        'name': 'name',
        'address': 'address',
        'telephone': 'telephone',
        'fax_number': 'faxNumber',
        'email': 'email',
        'same_as': 'sameAs',
        'nws_region': 'nwsRegion',
        'parent_organization': 'parentOrganization',
        'responsible_counties': 'responsibleCounties',
        'responsible_forecast_zones': 'responsibleForecastZones',
        'responsible_fire_zones': 'responsibleFireZones',
        'approved_observation_stations': 'approvedObservationStations'
    }

    def __init__(self, context=None, type=None, id=None, name=None, address=None, telephone=None, fax_number=None, email=None, same_as=None, nws_region=None, parent_organization=None, responsible_counties=None, responsible_forecast_zones=None, responsible_fire_zones=None, approved_observation_stations=None):  # noqa: E501
        """Office - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._type = None
        self._id = None
        self._id = None
        self._name = None
        self._address = None
        self._telephone = None
        self._fax_number = None
        self._email = None
        self._same_as = None
        self._nws_region = None
        self._parent_organization = None
        self._responsible_counties = None
        self._responsible_forecast_zones = None
        self._responsible_fire_zones = None
        self._approved_observation_stations = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if type is not None:
            self.type = type
        if id is not None:
            self.id = id
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if address is not None:
            self.address = address
        if telephone is not None:
            self.telephone = telephone
        if fax_number is not None:
            self.fax_number = fax_number
        if email is not None:
            self.email = email
        if same_as is not None:
            self.same_as = same_as
        if nws_region is not None:
            self.nws_region = nws_region
        if parent_organization is not None:
            self.parent_organization = parent_organization
        if responsible_counties is not None:
            self.responsible_counties = responsible_counties
        if responsible_forecast_zones is not None:
            self.responsible_forecast_zones = responsible_forecast_zones
        if responsible_fire_zones is not None:
            self.responsible_fire_zones = responsible_fire_zones
        if approved_observation_stations is not None:
            self.approved_observation_stations = approved_observation_stations

    @property
    def context(self):
        """Gets the context of this Office.  # noqa: E501


        :return: The context of this Office.  # noqa: E501
        :rtype: JsonLdContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this Office.


        :param context: The context of this Office.  # noqa: E501
        :type: JsonLdContext
        """

        self._context = context

    @property
    def type(self):
        """Gets the type of this Office.  # noqa: E501


        :return: The type of this Office.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Office.


        :param type: The type of this Office.  # noqa: E501
        :type: str
        """
        allowed_values = ["GovernmentOrganization"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this Office.  # noqa: E501


        :return: The id of this Office.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Office.


        :param id: The id of this Office.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def id(self):
        """Gets the id of this Office.  # noqa: E501


        :return: The id of this Office.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Office.


        :param id: The id of this Office.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Office.  # noqa: E501


        :return: The name of this Office.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Office.


        :param name: The name of this Office.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def address(self):
        """Gets the address of this Office.  # noqa: E501


        :return: The address of this Office.  # noqa: E501
        :rtype: OfficeAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Office.


        :param address: The address of this Office.  # noqa: E501
        :type: OfficeAddress
        """

        self._address = address

    @property
    def telephone(self):
        """Gets the telephone of this Office.  # noqa: E501


        :return: The telephone of this Office.  # noqa: E501
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this Office.


        :param telephone: The telephone of this Office.  # noqa: E501
        :type: str
        """

        self._telephone = telephone

    @property
    def fax_number(self):
        """Gets the fax_number of this Office.  # noqa: E501


        :return: The fax_number of this Office.  # noqa: E501
        :rtype: str
        """
        return self._fax_number

    @fax_number.setter
    def fax_number(self, fax_number):
        """Sets the fax_number of this Office.


        :param fax_number: The fax_number of this Office.  # noqa: E501
        :type: str
        """

        self._fax_number = fax_number

    @property
    def email(self):
        """Gets the email of this Office.  # noqa: E501


        :return: The email of this Office.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Office.


        :param email: The email of this Office.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def same_as(self):
        """Gets the same_as of this Office.  # noqa: E501


        :return: The same_as of this Office.  # noqa: E501
        :rtype: str
        """
        return self._same_as

    @same_as.setter
    def same_as(self, same_as):
        """Sets the same_as of this Office.


        :param same_as: The same_as of this Office.  # noqa: E501
        :type: str
        """

        self._same_as = same_as

    @property
    def nws_region(self):
        """Gets the nws_region of this Office.  # noqa: E501


        :return: The nws_region of this Office.  # noqa: E501
        :rtype: str
        """
        return self._nws_region

    @nws_region.setter
    def nws_region(self, nws_region):
        """Sets the nws_region of this Office.


        :param nws_region: The nws_region of this Office.  # noqa: E501
        :type: str
        """

        self._nws_region = nws_region

    @property
    def parent_organization(self):
        """Gets the parent_organization of this Office.  # noqa: E501


        :return: The parent_organization of this Office.  # noqa: E501
        :rtype: str
        """
        return self._parent_organization

    @parent_organization.setter
    def parent_organization(self, parent_organization):
        """Sets the parent_organization of this Office.


        :param parent_organization: The parent_organization of this Office.  # noqa: E501
        :type: str
        """

        self._parent_organization = parent_organization

    @property
    def responsible_counties(self):
        """Gets the responsible_counties of this Office.  # noqa: E501


        :return: The responsible_counties of this Office.  # noqa: E501
        :rtype: list[str]
        """
        return self._responsible_counties

    @responsible_counties.setter
    def responsible_counties(self, responsible_counties):
        """Sets the responsible_counties of this Office.


        :param responsible_counties: The responsible_counties of this Office.  # noqa: E501
        :type: list[str]
        """

        self._responsible_counties = responsible_counties

    @property
    def responsible_forecast_zones(self):
        """Gets the responsible_forecast_zones of this Office.  # noqa: E501


        :return: The responsible_forecast_zones of this Office.  # noqa: E501
        :rtype: list[str]
        """
        return self._responsible_forecast_zones

    @responsible_forecast_zones.setter
    def responsible_forecast_zones(self, responsible_forecast_zones):
        """Sets the responsible_forecast_zones of this Office.


        :param responsible_forecast_zones: The responsible_forecast_zones of this Office.  # noqa: E501
        :type: list[str]
        """

        self._responsible_forecast_zones = responsible_forecast_zones

    @property
    def responsible_fire_zones(self):
        """Gets the responsible_fire_zones of this Office.  # noqa: E501


        :return: The responsible_fire_zones of this Office.  # noqa: E501
        :rtype: list[str]
        """
        return self._responsible_fire_zones

    @responsible_fire_zones.setter
    def responsible_fire_zones(self, responsible_fire_zones):
        """Sets the responsible_fire_zones of this Office.


        :param responsible_fire_zones: The responsible_fire_zones of this Office.  # noqa: E501
        :type: list[str]
        """

        self._responsible_fire_zones = responsible_fire_zones

    @property
    def approved_observation_stations(self):
        """Gets the approved_observation_stations of this Office.  # noqa: E501


        :return: The approved_observation_stations of this Office.  # noqa: E501
        :rtype: list[str]
        """
        return self._approved_observation_stations

    @approved_observation_stations.setter
    def approved_observation_stations(self, approved_observation_stations):
        """Sets the approved_observation_stations of this Office.


        :param approved_observation_stations: The approved_observation_stations of this Office.  # noqa: E501
        :type: list[str]
        """

        self._approved_observation_stations = approved_observation_stations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Office, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Office):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
